[DOCUMENT]
MID: 4f05169346ab4001b6ff19e8349e8fa7
TITLE: Developer Guide
VERSION: Git commit: @GIT_VERSION, Git branch: @GIT_BRANCH
DATE: @GIT_COMMIT_DATETIME
OPTIONS:
  ENABLE_MID: True

[GRAMMAR]
ELEMENTS:
- TAG: SECTION
  PROPERTIES:
    IS_COMPOSITE: True
  FIELDS:
  - TITLE: MID
    TYPE: String
    REQUIRED: True
  - TITLE: UID
    TYPE: String
    REQUIRED: False
  - TITLE: LEVEL
    TYPE: String
    REQUIRED: False
  - TITLE: PREFIX
    TYPE: String
    REQUIRED: False
  - TITLE: TITLE
    TYPE: String
    REQUIRED: True
- TAG: TEXT
  FIELDS:
  - TITLE: MID
    TYPE: String
    REQUIRED: False
  - TITLE: STATEMENT
    TYPE: String
    REQUIRED: True
  RELATIONS:
  - TYPE: Parent
  - TYPE: File

[TEXT]
MID: f174b0cdec6b482daa2878c8cc0d02c3
STATEMENT: >>>
This section contains everything that a StrictDoc developer/contributor should
know to get the job done.

StrictDoc is based on Python and maintained as any other Python package on
GitHub: with linting, tests, and hopefully enough best practice put into the
codebase.

The instructions and conventions described below are a summary of what is
considered to be the currently preferred development style for StrictDoc.

Any feedback on this development guide is appreciated.
<<<

[[SECTION]]
MID: c069e4c7b4d04dd09eb73f940e947bfd
UID: DEVGUIDE_GETTING_STARTED
TITLE: Getting started

[[SECTION]]
MID: 7477d397d0ca493f8e47532455d44965
TITLE: System dependencies

[TEXT]
MID: df2e1de12c6b456898c48a36650813d4
STATEMENT: >>>
StrictDoc itself mostly depends on other Python Pip packages, so there is nothing special to be installed.

You may need to install ``libtidy`` if you want to run the integration tests. The HTML markup validation tests depend on libtidy.

On Linux Ubuntu:

.. code:: bash

    sudo apt install tidy

From the core Python packages, StrictDoc needs Invoke, Tox and TOML:

.. code:: bash

    pip install invoke tox toml
<<<

[[SECTION]]
MID: b7a21564c30043acbf1733d9b47bd0bc
TITLE: Windows-specific: Long Path support

[TEXT]
MID: 8591cf6dece04244824c3ac2a8666ba3
STATEMENT: >>>
As `reported <https://github.com/strictdoc-project/strictdoc/issues/1118>`_ by a user, Windows Long Path support has to be enabled on a Windows system.

You can find information on how to enable the long paths support at https://pip.pypa.io/warnings/enable-long-paths.
<<<

[[/SECTION]]

[[/SECTION]]

[[SECTION]]
MID: 89ec30b9f67c489da635be391b0b0e15
TITLE: Installing StrictDoc from GitHub (developer mode)

[TEXT]
MID: 2407bb186b274a58b97b54b99ba6e86f
STATEMENT: >>>
.. note::
    Use this way of installing StrictDoc only if you want to make changes in StrictDoc's source code.
    Otherwise, install StrictDoc as a normal Pip package by running ``pip install strictdoc``.

.. code-block::

    git clone https://github.com/strictdoc-project/strictdoc.git && cd strictdoc
    pip install toml
    python3 developer/pip_install_strictdoc_deps.py
    python3 strictdoc/cli/main.py

The ``pip_install_strictdoc_deps.py`` installs all dependencies of StrictDoc, but not StrictDoc itself.
<<<

[[SECTION]]
MID: 1814a8c25afc40cba6dca1696cae119b
TITLE: Development within a virtual environment

[TEXT]
MID: a3e14b05452b48e2a0d8726fa00a7f00
STATEMENT: >>>
An alternative approach for those familiar with development in a virtual environment:

.. code:: bash

    git clone https://github.com/strictdoc-project/strictdoc.git && cd strictdoc
    python3 -m venv .venv
    . ./.venv/bin/activate
    pip install -e .
    python3 strictdoc/cli/main.py

.. note::

    Windows users, substitute: ``.\.venv\Scripts\activate``

After this, running ``developer/pip_install_strictdoc_deps.py`` should report that all packages are already installed.

This installs all the default dependencies of StrictDoc.
To also install the dev dependencies specified in ``pyproject.toml``:

.. code:: bash

    pip install ".[development]"
<<<

[[/SECTION]]

[[/SECTION]]

[[/SECTION]]

[[SECTION]]
MID: 90d5d79146e64660a71cd74ac23f6811
TITLE: Invoke for development tasks

[TEXT]
MID: 452b3c24463446a497ed6b8fcdb31fef
STATEMENT: >>>
All development tasks are managed using
`Invoke <https://www.pyinvoke.org/>`_ in the ``tasks.py`` file. On macOS and
Linux, all tasks run in dedicated virtual environments. On Windows, invoke uses
the parent pip environment, which can be a system environment or a user's virtual
environment.

Make sure to familiarize yourself with the available developer tasks by running:

.. code-block:: bash

    invoke --list
<<<

[[/SECTION]]

[[SECTION]]
MID: e7ce6a2f13614974b43aba56f6ae7253
TITLE: Main "Check" task

[TEXT]
MID: 09258e99cabb4455904b0e2c6687d492
STATEMENT: >>>
Before doing anything else, run the main ``check`` command to make sure that StrictDoc passes all tests on your system:

.. code:: bash

    invoke check

The ``check`` command runs all StrictDoc lint and test tasks with the only exception of end-to-end Web tests that are run with a separate task (see below).
<<<

[[/SECTION]]

[[SECTION]]
MID: 07d9a3c17be8475089844f5eb2cd8299
UID: DEVGUIDE_PYTHON_CODE
TITLE: Python code

[TEXT]
MID: 3012a69ef5d244d49fcb90c088d4523b
STATEMENT: >>>
- The version of Python is set to be as low as possible given some constraints
  of StrictDoc's dependencies. Ideally, the lowest Python version should only be
  raised when it is consistently deprecated by major software platforms like
  Ubuntu or GitHub Actions.

- All developer tasks are collected in the ``tasks.py`` which is run by Invoke tool. Run the ``invoke --list`` command to see the list of available commands.

- Formatting is governed by ``black`` which reformats the code automatically
  when the ``invoke check`` command is run.

  - If a string literal gets too long, it should be split into a multiline
    literal with each line being a meaningful word or a subsentence.

- Avoid shortening variable names unnecessarily. For example, use 'buffer' instead of 'buf', 'document' instead of 'doc', 'function' instead of 'func', 'length' instead of 'len', etc. Note: While some older parts of StrictDoc may not adhere to this guideline, they are planned to be refactored in the future.

- For "element is non-None" checks, a full form shall be used, for example: ``if foo is not None`` instead of ``if foo``. This helps to avoid any confusion with all sorts of strings (empty or non-empty ``str``, ``Optional[str]``) that are used extensively in StrictDoc's codebase. The non-None and non-empty string check shall therefore be as follows: ``if foo is not None and len(foo) > 0``. The explicit check also applies to any other kinds of objects besides strings: ``if foo is not None`` instead of ``if foo``. Rationale: ``if foo`` makes it unclear whether the intention is to check ``is not None`` or also ``len(foo) > 0``.

- For lambdas and short for loops, the recent convention is to add ``_`` to the variables of a for loop or a lambda to visually highlight their temporary use within the current scope which is done to counter the fact that these variables can leak and be used outside of the scope of the loop. Example:

.. code-block:: python

    for a_, b_ in foo:
        # use a_, b_ within the loop.

- The function arguments with the default values shall be avoided. This convention improves the visibility of the function interfaces at the coast of increased verbosity which is the price that StrictDoc development is willing to pay, maintaining the software long-term. The all-explicit function parameters indication is especially useful when the large code refactorings are made.

- StrictDoc has been making a gradual shift towards a stronger type system. Although type annotations haven't been added everywhere in the codebase, it is preferred to include them for all new code that is written.

- If a contribution includes changes in StrictDoc's code, at least the
  integration-level tests should be added to the ``tests/integration``. If the
  contributed code needs a fine-grained control over the added behavior, adding
  both unit and integration tests is preferred. The only exception where a
  contribution can contain no tests is "code climate" which is work which
  introduces changes in code but no change to the functionality.
<<<

[[/SECTION]]

[[SECTION]]
MID: 6e9707c99199464583f091056d1ae458
UID: DEVGUIDE_GIT_WORKFLOW
TITLE: Git workflow

[TEXT]
MID: 0e916453596b460b84a89f722354a825
STATEMENT: >>>
- The preferred Git workflow is "1 commit per 1 PR". If the work truly deserves
  a sequence of commits, each commit shall be self-contained and pass all checks
  from the ``invoke check`` command. The preferred approach: split the work into
  several independent Pull Requests to simplify the work of the reviewer.

- The branch should be always rebased against the main branch. The
  ``git fetch && git rebase origin/main`` is preferred over
  ``git fetch && git merge main``.

- The Git commit message should follow the format:

.. code-block::

    context: description

where the context can be a major feature being added or a folder. A form of  ``context: subcontext: description`` is also an option. Typical examples:

``docs: fix links to the grammar.py``

``reqif: native: export/import roundtrip for multiline requirement fields``

``backend/dsl: switch to dynamic fields, with validation``

``Poetry: add filecheck as a dependency``

- Use comma-separated contexts, if the committed work is dedicated to more than one topic. Example:

.. code-block::

    server, UI: update to new requirement styles

- When a contribution is simply an improvement of existing code without a change
  in the functionality, the commit should be named: ``Code climate: description``. Example:

.. code-block::

    Code climate: fix all remaining major Pylint warnings
<<<

[[/SECTION]]

[[SECTION]]
MID: 2420b2d7a4624bd99b0f8088dfa9abff
TITLE: Frontend development

[TEXT]
MID: d818aad87db54985b8933f98528808ab
STATEMENT: >>>
The shortest path to run the server when the StrictDoc's source code is cloned:

.. code-block:: bash

    invoke server
<<<

[[/SECTION]]

[[SECTION]]
MID: 73c717608cce4abca2c768f1dbfb705d
TITLE: Running End-to-End Web tests

[TEXT]
MID: da3cbcd69b0545988daeb0f42098830d
STATEMENT: >>>
.. code:: bash

    invoke test-end2end
<<<

[[/SECTION]]

[[SECTION]]
MID: 240dc1426d994397ac1401834b4f0ef0
TITLE: Running integration tests

[TEXT]
MID: 4e307b3b950840bbbe455c1ae3238a6e
STATEMENT: >>>
The integration tests are run using Invoke:

.. code-block:: bash

    invoke test-integration

The ``--focus`` parameter can be used to run only selected tests that match a given substring. This helps to avoid running all tests all the time.

.. code-block:: bash

    invoke test-integration --focus <keyword>

See `How to test command-line programs with Python tools: LIT and FileCheck <https://stanislaw.github.io/2020-11-20-how-to-test-command-line-programs-with-python.html>`_ to learn more about LIT and FileCheck, which enable the StrictDoc integration tests.
<<<

[[/SECTION]]

[[SECTION]]
MID: 7b4bf839b1c44b0d82001060596d8cbf
TITLE: Documentation

[TEXT]
MID: d1f5fde86ebc4103bc4eb0334b1ec919
STATEMENT: >>>
- Every change in the functionality or the infrastructure should be documented.
- Every line of documentation shall be no longer than 80 characters. StrictDoc's
  own documentation has a few exceptions, however, the latest preference is
  given to 80 characters per line. Unfortunately, until there is automatic
  support for mixed SDoc/RST content, all long lines shall be edited and
  split by a contributor manually.
- The ``invoke docs`` task should be used for re-generating documentation on a
  developer machine.
<<<

[[/SECTION]]

[[SECTION]]
MID: a44e3b99323b4ac291f4b4d3948c3cc0
TITLE: Conventions

[TEXT]
MID: 49b7349a3bee478cbe81d8ef25f6245c
STATEMENT: >>>
- ``snake_case`` everywhere, no ``kebab-case``.

  - This rule applies everywhere where applicable: file and folder names, HTML attributes.
  - Exception: HTML data-attributes and ``testid`` identifiers.
<<<

[[/SECTION]]
